//
// Created by intellij-pest on 2023-08-27
// concorde
// Author: mitch
//

program = {
    stmts_required
}

stmts_required = {
    (stmt? ~ NEWLINE)+
}

stmts = {
    (stmt? ~ NEWLINE)*
}

stmt = {
    method_def |
    class_def |
    for_in |
    while_loop |
    use_stmt |
    short_stmt
}

short_stmt = _{
    assignment |
    loop_break |
    loop_continue |
    return_stmt |
    expr
}

use_stmt = {
    "use" ~ path
}

for_in = {
    "for" ~ binding ~ "in" ~ expr ~ NEWLINE ~
      stmts ~
    "end"
}

binding = {
    variable ~ ("," ~ variable)*
}

while_loop = {
    "while" ~ expr ~ NEWLINE ~
      stmts ~
    "end"
}

class_method_spec = { "self::" }

method_def = {
    "def" ~ class_method_spec? ~ ident ~ param_list ~ (
        (NEWLINE ~ stmts ~ "end") |
        ("=" ~ expr)
    )
}

class_def = {
    "class" ~ ident ~ param_list? ~ NEWLINE ~
        stmts ~
    "end"
}

loop_break = { "break" }
loop_continue = { "continue" }
return_stmt = { "return" ~ expr? }

param_list = {
    ("(" ~ space ~ ")") |
    ("(" ~ space ~ param ~ (space ~ "," ~ space ~ param)* ~ space ~ ","? ~ space ~ ")")
}

space = _{ NEWLINE* }

param = {
    ident ~ ("=" ~ expr)?
}

assignment = {
    lvalue ~ op_assignment ~ expr
}

tuple = {
    "(" ~ space ~ ")" |
    "(" ~ space ~ expr ~ "," ~ space ~ ")" |
    "(" ~ space ~ expr ~ ("," ~ space ~ expr)+ ~ ","? ~ space ~ ")"
}

op_assignment = _{
    op_eq | op_plus_eq | op_minus_eq | op_star_eq | op_slash_eq
}

expr = {
    if_else |
    logical_or
}

logical_or = {
    logical_and ~ (op_or ~ logical_and)*
}

logical_and = {
    equality ~ (op_and ~ equality)*
}

equality = {
    comparison ~ (op_equality ~ comparison)*
}

op_equality = _{
    op_eq_eq | op_neq
}

comparison = {
    term ~ (op_comparison ~ term)*
}

op_comparison = _{
    op_gte | op_lte | op_gt | op_lt
}

term = {
    factor ~ (op_term ~ factor)*
}

op_term = _{ op_plus | op_minus }

factor = {
    logical_not ~ (op_factor ~ logical_not)*
}

op_factor = _{ op_star | op_slash | op_percent }

logical_not = {
    op_not* ~ unary_minus
}

unary_minus = {
    op_minus* ~ index
}

index = {
    access ~ ("[" ~ expr ~ "]")*
}

op_eq = { "=" }
op_eq_eq = { "==" }
op_neq = { "!=" }
op_gt = { ">" }
op_gte = { ">=" }
op_lt = { "<" }
op_lte = { "<=" }
op_minus = { "-" }
op_plus = { "+" }
op_star = { "*" }
op_percent = { "%" }
op_slash = { "/" }
op_minus_eq = { "-=" }
op_plus_eq = { "+=" }
op_star_eq = { "*=" }
op_slash_eq = { "/=" }
op_not = { "not" }
op_or = { "or" }
op_and = { "and" }

// or
// and
// == !=
// < > <= >=
// + -
// * /
// not
// (-)
// primary

if_else = {
    (
        "if" ~ logical_or ~ NEWLINE ~
            stmts ~
        ("else" ~ NEWLINE ~
            stmts)? ~
        "end"
    ) | (
        "if" ~ logical_or ~ "then" ~ short_stmt ~ ("else" ~ short_stmt)?
    )
}

// a.b -> access(ident, ident)
// a.b() -> call(access(ident, ident))
// a().b() -> call(access(call(ident), ident))
access = {
    call ~ (space ~ "." ~ call)*
}

call = {
    primary ~ arg_list*
}

primary = {
    literal |
    closure |
    grouping |
    path
}

closure = {
  "fn" ~ binding ~ "->" ~
    (short_stmt | "do" ~ NEWLINE ~ stmts) ~
  "end"
}

grouping = {
    "(" ~ expr ~ ")"
}

lvalue = {
    tuple |
    index
}

path = {
    variable ~ ("::" ~ variable)*
}

variable = {
    ident
}

arg_list = {
    ("(" ~ space ~ ")") |
    ("(" ~ space ~ expr_list ~ space ~ ")")
}

expr_list = {
    space ~ expr ~ (space ~ "," ~ space ~ expr)* ~ space ~ ","?
}

literal = {
    dict | array | tuple | number | string | bool | nil
}

bool = @{ "true" | "false" }
nil = @{ "nil" }

KEYWORD = @{
    "class" |
    "true" |
    "false" |
    "nil" |
    "def" |
    "end" |
    "if" |
    "else" |
    "for" |
    "in" |
    "and" |
    "or" |
    "not" |
    "break" |
    "continue" |
    "return" |
    "then" |
    "do" |
    "fn"
}

ident = @{
    !(KEYWORD ~ !XID_START) ~
    (XID_START | "_") ~ (XID_CONTINUE | "?")*
}

number = @{
    "-"? ~
    integer ~
    ("." ~ mantissa)?
}
integer = _{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT }
mantissa = _{ ASCII_DIGIT+ }

string = @{
    "\"" ~ string_inner ~ "\"" |
    "'" ~ string_inner_single ~ "'"
}

array = {
    ("[" ~ space ~  "]") |
    ("[" ~ expr_list ~ "]")
}

dict = {
    ("[" ~ space ~ ":" ~ space ~ "]") |
    ("[" ~ dict_entry ~ ("," ~ dict_entry)* ~ ","? ~ space ~ "]")
}

dict_entry = _{
    space ~ ident ~ space ~ ":" ~ space ~ expr ~ space
}

string_inner = ${(!"\"" ~ ANY)*}
string_inner_single = ${(!"'" ~ ANY)*}

WHITESPACE = _{ " " }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

