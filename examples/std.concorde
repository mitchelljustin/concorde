class PP(swag)
end

class Enumerate(
  iter,
  index = 0,
)
  def iter() = self
  def next()
    item = self.iter.next()
    if item == nil then return nil
    index = self.index
    self.index += 1
    (index, item)
  end
end

class Take(
  iter,
  n,
  taken = 0,
)
  def iter() = self
  def next()
    if taken == n then return nil
    self.taken += 1
    iter.next()
  end
end

class Drop(
  iter,
  n,
  dropped = 0,
)
  def iter() = self
  def next()
    while self.dropped < n
      iter.next()
      self.dropped += 1
    end
    iter.next()
  end
end

class Map(
  iter,
  func,
)
  def iter() = self
  def next()
    item = iter.next()
    if item == nil then return nil
    func(item)
  end
end

class Filter(
  iter,
  pred,
)
  def iter() = self
  def next()
    for item in iter
      if pred(item) then return item
    end
    nil
  end
end

class IterAdapter(iter)
  def enumerate() = IterAdapter(Enumerate(iter))
  def take(n) = IterAdapter(Take(iter, n))
  def drop(n) = IterAdapter(Drop(iter, n))
  def map(func) = IterAdapter(Map(iter, func))
  def filter(pred) = IterAdapter(Filter(iter, pred))
  def each(func)
    for item in self
      func(item)
    end
  end

  def iter() = self
  def next() = self.iter.next()
  def to_a() = Array::from(self)
end

class RangeIter(
  range,
  index = range.start,
)
  def iter() = self

  def next()
    if range.finish != nil and index >= range.finish then return nil
    result = self.index
    self.index += 1
    result
  end
end

class Range(
  start,
  finish,
  index = start,
)
  def self::upto(finish) = self(0, finish)
  def self::from(start) = self(start, nil)

  def iter() = IterAdapter(RangeIter(self))

  def to_s() = start.to_s() + ".." + (finish or "")
end

class Array
  def self::from(iter)
    array = []
    for item in iter
      array.push(item)
    end
    array
  end

  def iter() = IterAdapter(ArrayIter(self))
end


class ArrayIter(
  array,
  index = 0,
)
  def next()
    if self.index >= self.array.len() then return nil
    item = self.array[self.index]
    self.index += 1
    item
  end
end
