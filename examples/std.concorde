def Some(x) = (true, x)
None = (false, nil)

class Enumerate(
  iter,
  index = 0,
)
  def iter() = self
  def next()
    (ok, item) = self.iter.next()
    if not ok then return None
    index = self.index
    self.index += 1
    Some((index, item))
  end
end

class Take(
  iter,
  n,
  taken = 0,
)
  def iter() = self
  def next()
    if taken == n then return None
    self.taken += 1
    iter.next()
  end
end

class Drop(
  iter,
  n,
  dropped = 0,
)
  def iter() = self
  def next()
    while self.dropped < n
      iter.next()
      self.dropped += 1
    end
    iter.next()
  end
end

class Map(
  iter,
  func,
)
  def iter() = self
  def next()
    (ok, item) = iter.next()
    if not ok then return None
    Some(func(item))
  end
end

class Filter(
  iter,
  pred,
)
  def iter() = self
  def next()
    for item in iter
      if pred(item) then return Some(item)
    end
    None
  end
end

class Zip(
  iter_lhs,
  iter_rhs,
)
  def iter() = self
  def next()
    (ok_lhs, lhs) = iter_lhs.next()
    (ok_rhs, rhs) = iter_rhs.next()
    if not ok_lhs or not ok_rhs
      None
    else
      Some((lhs, rhs))
    end
  end
end

class Adapter(iter)
  def enumerate() = Adapter(Enumerate(iter))
  def take(n) = Adapter(Take(iter, n))
  def drop(n) = Adapter(Drop(iter, n))
  def map(func) = Adapter(Map(iter, func))
  def filter(pred) = Adapter(Filter(iter, pred))
  def zip(other_iter) = Adapter(Zip(iter, other_iter.iter()))
  def each(func)
    for item in self
      func(item)
    end
  end

  def iter() = self
  def next() = self.iter.next()
  def to_a() = Array::from(self)
end

class RangeIter(
  range,
  index = range.start,
)
  def iter() = self

  def next()
    if range.finish != nil and index >= range.finish then return None
    result = self.index
    self.index += 1
    Some(result)
  end
end

class Range(
  start,
  finish,
  index = start,
)
  def self::upto(finish) = self(0, finish)
  def self::from(start) = self(start, nil)

  def iter() = Adapter(RangeIter(self))

  def to_s() = start.to_s() + ".." + (finish or "")
end

class Array
  def self::from(iter)
    array = []
    iter.each(fn item -> array.push(item) end)
    array
  end

  def iter() = Adapter(ArrayIter(self))
end


class ArrayIter(
  array,
  index = 0,
)
  def next()
    if self.index >= self.array.len() then return None
    item = self.array[self.index]
    self.index += 1
    Some(item)
  end
end

class String
  def repr() = '"' + self + '"'
end

class Object
  def repr() = self.to_s()
end

class Method
  def to_s() = __receiver__.__name__ + "::" + __name__
end

class Dictionary
  def keys() = self.entries().iter().map(fn t -> t[0] end).to_a()
  def values() = self.entries().iter().map(fn t -> t[1] end).to_a()
end
